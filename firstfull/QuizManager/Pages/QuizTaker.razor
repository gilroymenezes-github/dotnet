@page "/quizTaker"
@*@attribute [Authorize]*@

@using QuizManager.Components 
@using QuizManager.Models
@using QuizManager.Services 
@inject QuizService QuizRepository

<h1>Take your quiz!</h1>
<p>Your current score is @currentScore</p>

@if (quizItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var quizIndex = 0;
    @foreach (var quizItem in quizItems)
    {
        <section>
            <QuizItemComponent NumberedQuizItem="(quizItem, ++quizIndex)" 
                               AnsweredQuizItem="UpdateScore" >
            </QuizItemComponent>
        </section>
        <br />
    }
}

@code {
        List<QuizItem> quizItems;
        Dictionary<string, int> quizScores = new Dictionary<string, int>();
        int currentScore = 0;

    protected override async Task OnInitializedAsync()
    {
        quizItems = await QuizRepository.GetQuizAsync();
    }

    void UpdateScore(QuizItem answeredQuizItem)
    {
        quizScores[answeredQuizItem.Id]
            = answeredQuizItem.IsAnswerCorrect.HasValue
            ? answeredQuizItem.IsAnswerCorrect.Value ? answeredQuizItem.QuestionScore : 0
            : 0;
        currentScore = quizScores.Sum(x => x.Value);
    }
}
