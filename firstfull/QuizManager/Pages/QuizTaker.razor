@page "/quizTaker"
@*@attribute [Authorize]*@

@using QuizManager.Models
@using QuizManager.Services 
@inject QuizService QuizRepository

<h1>Take your quiz!</h1>
<p>Your current score is @currentScore</p>

@if (quiz == null)
{
    <p><em>Loading...</em></p>
}
else
{
    int quizIndex = 0;
    @foreach (var quizItem in quiz)
    {
        <section>
            <h3>@quizItem.Question.TextValue</h3>
            <div class="form-check">
            @{
                int choiceIndex = 0;
                quizScores.Add(0);
            }
            @foreach (var choice in quizItem.Answers)
            {
                int currentQuizIndex = quizIndex;
                <input class="form-check-input" type="radio" name="@quizIndex" value="@choiceIndex" @onchange="@((e) => UpdateScore(choice.TruthValue, currentQuizIndex))"/>@choice.TextValue<br>

                choiceIndex++;
            }
            </div>
        </section>

        quizIndex++;
    }
}

@code {
    List<QuizItem> quiz;
    List<int> quizScores = new List<int>();
    int currentScore = 0;

    protected override async Task OnInitializedAsync()
    {
        quiz = await QuizRepository.GetQuizAsync();
    }

    void UpdateScore(bool? choiceValue, int quizIndex)
    {
        quizScores[quizIndex] = choiceValue.HasValue ? choiceValue.Value ? quiz[quizIndex].QuestionScore : 0 : 0;

        currentScore = quizScores.Sum();
    }
}
